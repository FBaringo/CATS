function aerofgrunscript( OutputFileName, FlightGearBaseDirectory, GeometryModelName, ...
                          DestinationPort, AirportId, RunwayId, InitialAltitude, ...
                          InitialHeading, OffsetDistance, OffsetAzimuth, ...
                          FlightGearVersion, Architecture, EnableScenery, ...
                          DisableShaders, varargin)
                      
% AEROFGRUNSCRIPT internal function containing common code for generating run 
% script for Flight Gear Flight Simulator.

% Copyright 1984-2018 The MathWorks, Inc.

narginchk(14, 18);

% determine which computer type for which the run script should be generated

% currently recognizing {'auto', 'pcwin', 'glnx86', 'mac', 'maci', 'maci64', 'hpux', 'sol64', 'pcwin64'}
% others may need to be edited.

comptype = 'auto';
terrasyncCommand = '';
shadersCommand = '';

switch nargin
    case 14 %Case for which the data comes from the aero toolbox
        DataFlow = 'Send';
        FlightGearVersion = ['v' char(FlightGearVersion)];
    case 18 %Case for which the data comes from the Simulink FG mask
        DataFlow = varargin{1};
        OriginAddress = varargin{2};
        OriginPort = varargin{3};
        LocalAddress = varargin{4};
end

if (ischar(EnableScenery) && strcmp(EnableScenery, 'on')) || ...
        (islogical(EnableScenery) && EnableScenery == true)
    terrasyncCommand = ' --enable-terrasync';
end
if (ischar(DisableShaders) && strcmp(DisableShaders, 'on')) || ...
        (islogical(DisableShaders) && DisableShaders == true)
    shadersCommand = ' --prop:/sim/rendering/shaders/quality-level=0';
end

% Convert inputs to character vectors so it can also handle strings
OutputFileName = char(OutputFileName);
FlightGearBaseDirectory = char(FlightGearBaseDirectory);
GeometryModelName = char(GeometryModelName);
DestinationPort = char(DestinationPort);
AirportId = char(AirportId);
RunwayId = char(RunwayId);
Architecture = char(Architecture);

if ~strcmp(Architecture,'Default')
    switch Architecture
        case 'Win64'
            comptype = 'pcwin64';
            sep = '\';
        case 'Linux'
            comptype = 'glnxa64';
            sep = '/';
        case 'Mac'
            comptype = 'mac';
            sep = '/';
    end
else
    sep = filesep;
end


if strcmp(comptype,'auto')
    % generate run script for current computer
    comptype = lower(computer);
end

%--- FGFS is on: win64, i386, maci.

switch comptype
    case 'pcwin64'
        cputype = 'win64';
    case 'glnxa64'
        cputype = 'i386';
    case 'mac'
        cputype = 'mac';
    case 'maci'
        cputype = 'mac';
    case 'maci64'
        cputype = 'mac';
    otherwise
        cputype = 'EDIT_THIS_NAME';
        warning(message('aero:aerofgrunscript:ArchNotFound', OutputFileName));
end

addrflag = 0;

% Checks for base directory existence:
%--------------------------------------
if nargin <= 14 && isempty(FlightGearBaseDirectory)
    error(message('aero:aerofgrunscript:InvalidPath',FlightGearBaseDirectory));   
elseif nargin > 14 && isempty(FlightGearBaseDirectory)
    errordlg(getString(message('aero:aerofgrunscript:InvalidPath',FlightGearBaseDirectory))...
    ,getString(message('aero:aerofgrunscript:InvalidFileNameTitle')),'modal');
    addrflag=-1; %Exit flag for the rest of the script
end

%Text file preparation:
%-----------------------
if strcmp(cputype,'win64')  && addrflag ~= -1
    if nargin <= 14 && strcmp(FlightGearBaseDirectory(1:2),'\\')
        warning(message('aero:aerofgrunscript:InvalidUNC',FlightGearBaseDirectory));
    elseif nargin > 14 && strcmp(FlightGearBaseDirectory(1:2),'\\')
        warndlg(getString(message('aero:aerofgrunscript:InvalidUNC',FlightGearBaseDirectory))...
        ,getString(message('aero:aerofgrunscript:WarningTitle')));
    elseif nargin <= 14 && ~(FlightGearBaseDirectory(2) == ':')       
        error(message('aero:aerofgrunscript:InvalidPath',FlightGearBaseDirectory));        
    elseif nargin > 14 && ~(FlightGearBaseDirectory(2) == ':')
        errordlg(getString(message('aero:aerofgrunscript:InvalidPath',FlightGearBaseDirectory))...
        ,getString(message('aero:aerofgrunscript:InvalidFileNameTitle')),'modal');
        addrflag=-1; %Exit flag for the rest of the script
    end
    fmt = [ FlightGearBaseDirectory(1:2), '\n'];
    fmt = [fmt, 'cd %s\n\n' ];
        
elseif strcmp(cputype,'mac')
   if  strncmp( FlightGearVersion, 'v2.', 3 ) || ...
       strncmp( FlightGearVersion, 'v3.',3) || ...
       strncmp( FlightGearVersion, 'v20',3)
        fmt = '#! /bin/sh \n\n'; % mac version 1.9.1 & > uses bourne script to set up FG correctly
        fmt = [fmt, 'cd %s%sFlightGear.app%sContents%sResources \n\n']; 
    else
        error(message('aero:aerofgrunscript:unknownFGVersion'));
    end
else
    fmt = '#! /bin/csh \n\n'; % run file as shell script on unix
    fmt = [fmt, 'cd %s\n\n' ];
end

if addrflag ~= -1
    % set FG_ROOT based on platform
    if strcmp(cputype,'win64')
        fmt = [fmt, 'SET FG_ROOT=%s%sdata\n' ];
    elseif strcmp(cputype,'mac')
        fmt = fmt; %#ok<ASGSL> % no environment setup on the mac 
    else
        fmt = [fmt, '#setenv LD_LIBRARY_PATH %s%slib:$LD_LIBRARY_PATH\n' ];
        fmt = [fmt, '#setenv FG_ROOT %s%sdata\n' ];
        fmt = [fmt, '#setenv FG_SCENERY %s%sScenery:$FG_ROOT%sScenery:$FG_ROOT%sWorldScenery\n\n' ];
    end

    % set executable location based on platform 
    if strcmp(cputype,'win64')
        % Determine if different path should be used in case that the
        % versions are 3.0 or lower
        if any(strcmp(FlightGearVersion,{'v2.0','v2.4'}))
            pathFlag = false;
            fmt = [fmt, '.%s%sbin%swin32%sfgfs'];
        elseif any(strcmp(FlightGearVersion,{'v2.6','v2.8','v2.10','v2.12','v3.0'}))
            pathFlag = false;
            if exist(fullfile(FlightGearBaseDirectory,'bin',cputype,'fgfs.exe'),'file')
                fmt = [fmt, '.%s%sbin%s' cputype '%sfgfs'];
            elseif exist(fullfile(FlightGearBaseDirectory,'bin','win32','fgfs.exe'),'file')
                fmt = [fmt, '.%s%sbin%swin32%sfgfs'];
            else
                fmt = [fmt, '.%s%sbin%s' cputype '%sfgfs'];
            end
        else
            pathFlag = true;
            fmt = [fmt, '.%s%sbin%sfgfs'];
        end
    elseif strcmp(cputype,'mac')
        if strcmp( FlightGearVersion, 'v3.4') || ...
	   strncmp( FlightGearVersion, 'v20',3)
            fmt = [fmt, '.%s../MacOS/fgfs --fg-root=.%s '];
        elseif strncmp( FlightGearVersion, 'v2.', 3 ) || ...
           strcmp( FlightGearVersion, 'v3.0') || ...
           strcmp( FlightGearVersion, 'v3.2')  
            fmt = [fmt, '.%sfgfs.sh --fg-root=.%s ']; % version 1.9.1 & > uses bourne script to set up FG correctly
        else
            error(message('aero:aerofgrunscript:unknownFGVersion'));
        end
    else
        fmt = [fmt, 'fgfs'];
    end
    % set command line depending on data flow
    if strcmp(DataFlow,'Send')
            fmt = [fmt, ' --aircraft=%s --fdm=network,localhost,5501,%s,5503 --fog-fastest --disable-clouds --start-date-lat=2004:06:01:09:00:00 --disable-sound --in-air --enable-freeze --airport=%s --runway=%s --altitude=%g --heading=%g --offset-distance=%g --offset-azimuth=%g%s%s\n'];
    elseif strcmp(DataFlow,'Receive')
        fmt = [fmt, ' --aircraft=%s --native-ctrls=socket,out,30,%s,%s,udp --fog-fastest --disable-clouds --start-date-lat=2004:06:01:09:00:00 --disable-sound --in-air --enable-freeze --airport=%s --runway=%s --altitude=%g --heading=%g --offset-distance=%g --offset-azimuth=%g%s%s\n'];
    elseif strcmp(DataFlow,'Send-Receive')
        fmt = [fmt, ' --aircraft=%s --fdm=null --native-fdm=socket,in,30,%s,%s,udp --native-ctrls=socket,out,30,%s,%s,udp --fog-fastest --disable-clouds --start-date-lat=2004:06:01:09:00:00 --disable-sound --in-air --enable-freeze --airport=%s --runway=%s --altitude=%g --heading=%g --offset-distance=%g --offset-azimuth=%g%s%s\n'];
    end
    
    %Text file creation:
    %-----------------------
    % Add '+' to write over old file instead of appending
    [fh,sysMessage] = fopen(OutputFileName,'wt+');
    % Check for validity of file name. Some characters like "&?_" are
    % prohibited.  
    if fh == -1 && nargin > 14 %Error coming from the mask in the blockset
        errordlg(getString(message('aero:aerofgrunscript:InvalidFileName',OutputFileName, sysMessage))...
            ,getString(message('aero:aerofgrunscript:InvalidFileNameTitle')));
    elseif fh == -1 && nargin <= 14 %Error coming from the Aerospace Toolbox
        error(message('aero:aerofgrunscript:InvalidFileName',OutputFileName, sysMessage));
    else
        if strcmp(DataFlow,'Send')
            if strcmp(cputype,'win64')
                if pathFlag
                    fprintf( fh, fmt, ...
                        FlightGearBaseDirectory, ...
                        FlightGearBaseDirectory, ...
                        sep, sep, sep, sep, ...
                        GeometryModelName, ...
                        DestinationPort, ...
                        AirportId, ...
                        RunwayId, ...
                        InitialAltitude, ...
                        InitialHeading, ...
                        OffsetDistance, ...
                        OffsetAzimuth, ...
                        terrasyncCommand, ...
                        shadersCommand);
                else
                    fprintf( fh, fmt, ...
                        FlightGearBaseDirectory, ...
                        FlightGearBaseDirectory, ...
                        sep, sep, sep, sep, sep, ...
                        GeometryModelName, ...
                        DestinationPort, ...
                        AirportId, ...
                        RunwayId, ...
                        InitialAltitude, ...
                        InitialHeading, ...
                        OffsetDistance, ...
                        OffsetAzimuth, ...
                        terrasyncCommand, ...
                        shadersCommand);
                end
            elseif strcmp(cputype,'mac')
                fprintf( fh, fmt, ...
                    FlightGearBaseDirectory, sep, sep, sep, ...
                    sep, sep, ...
                    GeometryModelName, ...
                    DestinationPort, ...
                    AirportId, ...
                    RunwayId, ...
                    InitialAltitude, ...
                    InitialHeading, ...
                    OffsetDistance, ...
                    OffsetAzimuth, ...
                    terrasyncCommand, ...
                    shadersCommand);

            else
                fprintf( fh, fmt, ...
                    FlightGearBaseDirectory, ...
                    FlightGearBaseDirectory, sep, ...
                    FlightGearBaseDirectory, sep, ...
                    FlightGearBaseDirectory, sep, sep, sep, ...
                    GeometryModelName, ...
                    DestinationPort, ...
                    AirportId, ...
                    RunwayId, ...
                    InitialAltitude, ...
                    InitialHeading, ...
                    OffsetDistance, ...
                    OffsetAzimuth, ...
                    terrasyncCommand, ...
                    shadersCommand);
            end
        elseif strcmp(DataFlow,'Receive')
            if strcmp(cputype,'win64')
                if pathFlag
                    fprintf( fh, fmt, ...
                        FlightGearBaseDirectory, ...
                        FlightGearBaseDirectory, ...
                        sep, sep, sep, sep, ...
                        GeometryModelName, ...
                        LocalAddress, ...
                        OriginPort, ...
                        AirportId, ...
                        RunwayId, ...
                        InitialAltitude, ...
                        InitialHeading, ...
                        OffsetDistance, ...
                        OffsetAzimuth, ...
                        terrasyncCommand, ...
                        shadersCommand);
                else
                    fprintf( fh, fmt, ...
                        FlightGearBaseDirectory, ...
                        FlightGearBaseDirectory, ...
                        sep, sep, sep, sep,sep, ...
                        GeometryModelName, ...
                        LocalAddress, ...
                        OriginPort, ...
                        AirportId, ...
                        RunwayId, ...
                        InitialAltitude, ...
                        InitialHeading, ...
                        OffsetDistance, ...
                        OffsetAzimuth, ...
                        terrasyncCommand, ...
                        shadersCommand);
                end
            elseif strcmp(cputype,'mac')
                fprintf( fh, fmt, ...
                    FlightGearBaseDirectory, sep, sep, sep, ...
                    sep, sep, ...
                    GeometryModelName, ...
                    LocalAddress, ...
                    OriginPort, ...
                    AirportId, ...
                    RunwayId, ...
                    InitialAltitude, ...
                    InitialHeading, ...
                    OffsetDistance, ...
                    OffsetAzimuth, ...
                    terrasyncCommand, ...
                    shadersCommand);

            else
                fprintf( fh, fmt, ...
                    FlightGearBaseDirectory, ...
                    FlightGearBaseDirectory, sep, ...
                    FlightGearBaseDirectory, sep, ...
                    FlightGearBaseDirectory, sep, sep, sep, ...
                    GeometryModelName, ...
                    LocalAddress, ...
                    OriginPort, ...
                    AirportId, ...
                    RunwayId, ...
                    InitialAltitude, ...
                    InitialHeading, ...
                    OffsetDistance, ...
                    OffsetAzimuth, ...
                    terrasyncCommand, ...
                    shadersCommand);
            end
        elseif strcmp(DataFlow,'Send-Receive')
            if strcmp(cputype,'win64')
                if pathFlag
                    fprintf( fh, fmt, ...
                        FlightGearBaseDirectory, ...
                        FlightGearBaseDirectory, ...
                        sep, sep, sep, sep, ...
                        GeometryModelName, ...
                        OriginAddress, ...
                        DestinationPort, ...
                        LocalAddress, ...
                        OriginPort, ...
                        AirportId, ...
                        RunwayId, ...
                        InitialAltitude, ...
                        InitialHeading, ...
                        OffsetDistance, ...
                        OffsetAzimuth, ...
                        terrasyncCommand, ...
                        shadersCommand);
                else
                    fprintf( fh, fmt, ...
                        FlightGearBaseDirectory, ...
                        FlightGearBaseDirectory, ...
                        sep, sep, sep, sep, sep, ...
                        GeometryModelName, ...
                        OriginAddress, ...
                        DestinationPort, ...
                        LocalAddress, ...
                        OriginPort, ...
                        AirportId, ...
                        RunwayId, ...
                        InitialAltitude, ...
                        InitialHeading, ...
                        OffsetDistance, ...
                        OffsetAzimuth, ...
                        terrasyncCommand, ...
                        shadersCommand);
                end
            elseif strcmp(cputype,'mac')
                fprintf( fh, fmt, ...
                    FlightGearBaseDirectory, sep, sep, sep, ...
                    sep, sep, ...
                    GeometryModelName, ...
                    OriginAddress, ...
                    DestinationPort, ...
                    LocalAddress, ...
                    OriginPort, ...
                    AirportId, ...
                    RunwayId, ...
                    InitialAltitude, ...
                    InitialHeading, ...
                    OffsetDistance, ...
                    OffsetAzimuth, ...
                    terrasyncCommand, ...
                    shadersCommand);

            else
                fprintf( fh, fmt, ...
                    FlightGearBaseDirectory, ...
                    FlightGearBaseDirectory, sep, ...
                    FlightGearBaseDirectory, sep, ...
                    FlightGearBaseDirectory, sep, sep, sep, ...
                    GeometryModelName, ...
                    OriginAddress, ...
                    DestinationPort, ...
                    LocalAddress, ...
                    OriginPort, ...
                    AirportId, ...
                    RunwayId, ...
                    InitialAltitude, ...
                    InitialHeading, ...
                    OffsetDistance, ...
                    OffsetAzimuth, ...
                    terrasyncCommand, ...
                    shadersCommand);
            end
        end
        fclose(fh);

        % make unix/mac script runnable
        if ~ispc
            system(['chmod 755 "' OutputFileName '"']);
        end

        %--- Now that file is output anyway, check if base and aircraft dir 
        %    exists and give a warning if it doesn't exist
        if ~exist(FlightGearBaseDirectory,'dir')
            warning(message('aero:aerofgrunscript:FGDirNotFound', FlightGearBaseDirectory));
        else
            if strcmp(cputype,'mac')
                FGAircraftDirectory = fullfile(FlightGearBaseDirectory,'FlightGear.app',...
                    'Contents','Resources','data','Aircraft');
                FGGeometryDirectory = fullfile(FGAircraftDirectory,GeometryModelName);
            else
                FGAircraftDirectory = fullfile(FlightGearBaseDirectory,'data','Aircraft');
                FGGeometryDirectory = fullfile(FlightGearBaseDirectory,'data','Aircraft',GeometryModelName);
            end
            if ~exist(FGGeometryDirectory,'dir')
                dirXML = dir(fullfile(FGAircraftDirectory,'*','*.xml'));
                xmlFound = any(strcmp({dirXML.name},[GeometryModelName '.xml']));
                if ~xmlFound
                    warning(message('aero:aerofgrunscript:FGGeometryNotFound', FGAircraftDirectory));
                end
            end
        end
        
    end
end
